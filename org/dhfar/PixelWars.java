package org.dhfar;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.StaticArray32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class PixelWars extends Contract {
    private static final String BINARY = "606060405260408051908101604052600981527f506978656c576172730000000000000000000000000000000000000000000000602082015260019080516200004d92916020019062000134565b50600160068190556007805460ff191690556127106009819055600e9190915560008054600160a060020a03191633600160a060020a0316179055600581905560085560408051908101604052601281527f506978656c57617273436861726163746572000000000000000000000000000060208201526002908051620000d992916020019062000134565b5060408051908101604052600481527f5057d0a100000000000000000000000000000000000000000000000000000000602082015260039080516200012392916020019062000134565b506004805460ff19169055620001d9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017757805160ff1916838001178555620001a7565b82800160010185558215620001a7579182015b82811115620001a75782518255916020019190600101906200018a565b50620001b5929150620001b9565b5090565b620001d691905b80821115620001b55760008155600101620001c0565b90565b61283d80620001e96000396000f3006060604052600436106101f85763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101fd5780630c420f9c1461028757806318160ddd1461032457806319289287146103495780631b9e16ad146103dc578063220565de146104985780632b30a9f4146104ab57806330c1b9ec146104d8578063313ce567146104eb57806331c3f31314610514578063324537911461052a57806333ce63061461055c5780634810bc591461057857806349d64c5f146106665780634c0999c71461067f57806352d9cb3b146106955780635a3b7e42146106c357806360e505c5146106d65780636896fabf146106ec5780636da7aeb7146106ff5780636ed79e8d146107155780636f566eef1461072b57806370a08231146107445780637ddbb5b7146107635780637e6cc17f1461077657806388af9813146107c75780638da5cb5b1461081e5780639201de551461083157806395d89b4114610847578063aebc95591461085a578063ba3daa4614610862578063bfe4b20b1461089f578063c21abf43146108b8578063c8099239146108cb578063c922c1f8146108ed578063d7b1d8a014610a16578063df32754b14610a29578063e040e9a014610a3e578063e970370114610a51578063eac551e014610a8b578063f2fde38b14610a9e575b600080fd5b341561020857600080fd5b610210610abd565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024c578082015183820152602001610234565b50505050905090810190601f1680156102795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029257600080fd5b61029d600435610b5b565b604051838152821515602082015260606040820181815290820183818151815260200191508051906020019080838360005b838110156102e75780820151838201526020016102cf565b50505050905090810190601f1680156103145780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561032f57600080fd5b610337610c5b565b60405190815260200160405180910390f35b341561035457600080fd5b61033760046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650610c6195505050505050565b34156103e757600080fd5b6103ef610e48565b6040518515156020820152604081018590528315156060820152600160a060020a038316608082015260a0810182905260c08082528190810188818151815260200191508051906020019080838360005b83811015610458578082015183820152602001610440565b50505050905090810190601f1680156104855780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34156104a357600080fd5b610337610e8d565b34156104b657600080fd5b6104c4600435602435610e93565b604051901515815260200160405180910390f35b34156104e357600080fd5b610337610f99565b34156104f657600080fd5b6104fe610fdf565b60405160ff909116815260200160405180910390f35b341561051f57600080fd5b6104c4600435610fe8565b341561053557600080fd5b610540600435611022565b604051600160a060020a03909116815260200160405180910390f35b341561056757600080fd5b6104c460043560243560443561103d565b341561058357600080fd5b61058e6004356112dd565b6040518981528715156040820152606081018790526080810186905260a08101859052600160a060020a0384811660c083015283151560e0830152821661010080830191909152610120602083018181528b54600260018216159094026000190116929092049083018190526101408301908b90801561064f5780601f106106245761010080835404028352916020019161064f565b820191906000526020600020905b81548152906001019060200180831161063257829003601f168201915b50509a505050505050505050505060405180910390f35b341561067157600080fd5b6104c4600435602435611332565b341561068a57600080fd5b61021060043561143b565b34156106a057600080fd5b6106ab600435611559565b60405191825260208201526040908101905180910390f35b34156106ce57600080fd5b610210611576565b34156106e157600080fd5b6103ef6004356115e1565b34156106f757600080fd5b6103376117a0565b341561070a57600080fd5b6103376004356117c0565b341561072057600080fd5b6104c460043561182e565b341561073657600080fd5b6104c4600435602435611910565b341561074f57600080fd5b610337600160a060020a03600435166119e0565b341561076e57600080fd5b6103376119f2565b341561078157600080fd5b61033760046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506119f895505050505050565b34156107d257600080fd5b6107da611c82565b604051808361040080838360005b838110156108005780820151838201526020016107e8565b50505050905001821515151581526020019250505060405180910390f35b341561082957600080fd5b610540611d22565b341561083c57600080fd5b610210600435611d31565b341561085257600080fd5b610210611e44565b6104c4611eaf565b341561086d57600080fd5b610882600160f860020a031960043516611f64565b604051600160f860020a0319909116815260200160405180910390f35b34156108aa57600080fd5b6104c4600435602435611fc8565b34156108c357600080fd5b6104c4612084565b34156108d657600080fd5b6104c4600435600160a060020a036024351661208d565b34156108f857600080fd5b61090360043561218b565b604051600160a060020a038a16815260208101604082018961040080838360005b8381101561093c578082015183820152602001610924565b50505050905001886020800280838360005b8381101561096657808201518382015260200161094e565b50505050891515920191825250602081018790528515156040820152600160a060020a0385811660608301528416608082015260a083820381018352018a818151815260200191508051906020019080838360005b838110156109d35780820151838201526020016109bb565b50505050905090810190601f168015610a005780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b3415610a2157600080fd5b6103376123c6565b3415610a3457600080fd5b610a3c6123cc565b005b3415610a4957600080fd5b6104c46123e9565b3415610a5c57600080fd5b610a71600160f860020a031960043516612419565b604051918252151560208201526040908101905180910390f35b3415610a9657600080fd5b610337612622565b3415610aa957600080fd5b610a3c600160a060020a0360043516612628565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b535780601f10610b2857610100808354040283529160200191610b53565b820191906000526020600020905b815481529060010190602001808311610b3657829003601f168201915b505050505081565b600080610b66612665565b600080610b71612665565b610b79612665565b60008054819081908190819033600160a060020a03908116911614610b9d57600080fd5b6000985060014303409750610bb188611d31565b96508695506000945060019350600092505b8c831015610c4757610bf1868481518110610bda57fe5b016020015160f860020a900460f860020a02612419565b915091508015610c0b576001820191508184029350610c10565b600198505b600190940193601f83148015610c2557508c85105b15610c2f57600092505b8c851415610c3c57610c47565b600190920191610bc3565b50919b969a50939850949650505050505050565b60055481565b6000610c6b612677565b600160a060020a0333166000908152600d602052604090206005015460ff1615610c985760009150610e41565b600e548152602081018490526002836000604051602001526040518082805190602001908083835b60208310610cdf5780518252601f199092019160209182019101610cc0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060206040518083038160008661646e5a03f11515610d2157600080fd5b5050604051805160408084019190915260016060840181905260006080850181905260a0850191909152600160a060020a0333168152600d6020522082915081518155602082015181600101908051610d7e9291602001906126bb565b5060408201516002820155606082015160038201805460ff19169115159190911790556080820151816004015560a082015160058201805460ff191691151591909117905560c082015160069091015550600e80546000908152600f6020526040908190208054600160a060020a033316600160a060020a0319909116811790915591547f85841522199c696c3d4a549fea06732153559ded5db5cf6dfa3bb099827f2c84915190815260200160405180910390a2600e80546001810190915591505b5092915050565b610e50612665565b600160a060020a0333166000908152600d60205260408120548190819081908190610e7a906115e1565b949b939a50919850965094509092509050565b600e5481565b600160a060020a0333166000908152600d602052604081206005015460ff161580610eda5750600160a060020a0333166000908152600d602052604090206003015460ff16155b15610ee757506000610f93565b6000838152600a6020526040902054600160a060020a03161580610f2657506000838152600a602052604090205433600160a060020a03908116911614155b15610f3357506000610f93565b6000838152600c602052604090206043015482901015610f5557506000610f93565b506000828152600c6020908152604080832060430180548590039055600160a060020a0333168352600d909152902060060180546002830401905560015b92915050565b600060015b600654811015610fdb576000818152600a602052604090205433600160a060020a0390811691161415610fd357809150610fdb565b600101610f9e565b5090565b60045460ff1681565b6000805433600160a060020a0390811691161461100457600080fd5b600082116110145750600061101d565b50600981905560015b919050565b600a60205260009081526040902054600160a060020a031681565b600160a060020a0333166000908152600d602052604081206005015481908190819060ff16158061108a5750600160a060020a0333166000908152600d602052604090206003015460ff16155b1561109857600093506112d3565b6000878152600a6020526040902054600160a060020a031615806110d757506000878152600a602052604090205433600160a060020a03908116911614155b156110e557600093506112d3565b6000878152600c60209081526040909120602201908790811061110457fe5b01546000888152600c60209081526040909120600201908890811061112557fe5b01541061113557600093506112d3565b600160a060020a0333166000908152600d60205260409020600601548590101561116257600093506112d3565b60008610806111715750602086115b1561117f57600093506112d3565b6000878152600c60209081526040909120600201908790811061119e57fe5b01546000888152600c6020526040902060430154600291820a909102935085019150811580156111cd57508282105b156111db57600093506112d3565b6000878152600c6020526040902060430154839010611211576000878152600c602052604090206043018054849003905561124e565b506000868152600c60209081526040808320604301839055600160a060020a0333168352600d909152902060060180548383038603908190039091555b6000878152600c60209081526040909120600201908790811061126d57fe5b0180546001019055600160a060020a0333167fd3418c42c10c7b7da62e8288ec3c7ba70c2c983838926a395fd6b49a2ed122cd888886896040518085815260200184815260200183815260200182815260200194505050505060405180910390a2600193505b5050509392505050565b600c602052600090815260409020805460428201546043830154604484015460458501546046860154604787015495966001019560ff95861695600160a060020a038084169360a060020a9004909116911689565b6000805433600160a060020a0390811691161461134e57600080fd5b6000828152600f6020908152604080832054600160a060020a03168352600d90915290206005015460ff16151561138757506000610f93565b600160a060020a0333166000908152600d60205260409020600401548390106113d157600160a060020a0333166000908152600d60205260409020600401805484900390556113ee565b600160a060020a0333166000908152600d60205260408120600401555b33600160a060020a03167f5ccb25e760b69813d714bbbfa3ef14f68a90e2e90047e39cd05e8107a2b70d22848460405191825260208201526040908101905180910390a250600192915050565b611443612665565b61144b612665565b6000806000806040805180591061145f5750595b818152601f19601f830116810160200160405290509450600093505b60208460ff16101561154e578660ff85166020811061149657fe5b1a60f860020a02925060108360f860020a900460ff168115156114b557fe5b0460f860020a0291508160f860020a90046010028360f860020a90040360f860020a0290506114e382611f64565b858560020260ff16815181106114f557fe5b906020010190600160f860020a031916908160001a90535061151681611f64565b858560020260010160ff168151811061152b57fe5b906020010190600160f860020a031916908160001a90535060019093019261147b565b509295945050505050565b6000908152600c6020526040902060448101546045909101549091565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b535780601f10610b2857610100808354040283529160200191610b53565b6115e9612665565b60008060008060006115f9612677565b60005433600160a060020a039081169116148061163057506000888152600f602052604090205433600160a060020a039081169116145b15611796576000888152600f6020908152604080832054600160a060020a03168352600d909152908190209060e09051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561170a5780601f106116df5761010080835404028352916020019161170a565b820191906000526020600020905b8154815290600101906020018083116116ed57829003601f168201915b50505091835250506002820154602080830191909152600383015460ff90811615156040840152600484015460608401526005840154161515608083015260069092015460a090910152909150810151816060015182608001518360a0015160008c8152600f6020526040902054600160a060020a031660c08601518595509650965096509650965096505b5091939550919395565b600160a060020a0333166000908152600d60205260409020600401545b90565b6000818152600a6020526040812054819033600160a060020a03908116911614156118285750600182015b600654811015611828576000818152600a602052604090205433600160a060020a039081169116141561182057809150611828565b6001016117eb565b50919050565b600160a060020a0333166000908152600d602052604081206005015460ff1615806118755750600160a060020a0333166000908152600d602052604090206003015460ff16155b156118825750600061101d565b6000828152600a6020526040902054600160a060020a031615806118c157506000828152600a602052604090205433600160a060020a03908116911614155b156118ce5750600061101d565b506000908152600c60209081526040808320604201805460ff19166001908117909155600160a060020a0333168452600b909252909120805460001901905590565b6000805433600160a060020a0390811691161461192c57600080fd5b6000838152600a6020526040902054600160a060020a0316158061196b57506000838152600a602052604090205433600160a060020a03908116911614155b1561197857506000610f93565b6000838152600c602052604090819020604301805484019055600160a060020a033316907f58d5cec2021cc2832a8aad697f7d4b163504f269cac4dd7d061719594646633890859085905191825260208201526040908101905180910390a250600192915050565b600b6020526000908152604090205481565b60095481565b6000611a02612735565b611a0a6127a2565b600160a060020a0333166000908152600d602052604081206005015460ff161580611a515750600160a060020a0333166000908152600d602052604090206003015460ff16155b15611a5f5760009350611c7a565b60075460ff1615611a735760009350611c7a565b6006546000908152600a6020526040902054600160a060020a031615611a9c5760009350611c7a565b60208301859052611aab611c82565b915091508015611abe5760009350611c7a565b6006548084526060840183905260006080850181905260a08501819052908152600c60205260409020839081518155602082015181600101908051611b079291602001906126bb565b506040820151611b1d90600283019060206127ca565b506060820151611b3390602283019060206127ca565b50608082015160428201805460ff191691151591909117905560a0820151816043015560c0820151816044015560e08201518160450155610100820151604682018054600160a060020a031916600160a060020a039290921691909117905561012082015160468201805491151560a060020a0274ff00000000000000000000000000000000000000001990921691909117905561014082015160479091018054600160a060020a03928316600160a060020a031991821617909155600680546000908152600a602052604090819020805433909516949093168417909255549192507fac5723a3da81e10f32b38b7ea4f240852779f41801a2de2819fc56939313d5c991905190815260200160405180910390a26006805460019081018255600160a060020a0333166000908152600b6020526040902080549091019055546000190193505b505050919050565b611c8a6127a2565b600080611c956127a2565b6000611c9f612665565b611ca7612665565b600080600080975060014303409550611cbf86611d31565b9450849350600092505b6020831015611d1257611ce1848481518110610bda57fe5b915091508015611d025781878460208110611cf857fe5b6020020152611d07565b600197505b600190920191611cc9565b5094989597509495505050505050565b600054600160a060020a031681565b611d39612665565b611d41612665565b60008060008060408051805910611d555750595b818152601f19601f830116810160200160405290509450600093505b60208460ff16101561154e578660ff851660208110611d8c57fe5b1a60f860020a02925060108360f860020a900460ff16811515611dab57fe5b0460f860020a0291508160f860020a90046010028360f860020a90040360f860020a029050611dd982611f64565b858560020260ff1681518110611deb57fe5b906020010190600160f860020a031916908160001a905350611e0c81611f64565b858560020260010160ff1681518110611e2157fe5b906020010190600160f860020a031916908160001a905350600190930192611d71565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b535780601f10610b2857610100808354040283529160200191610b53565b600160a060020a0333166000908152600d6020526040812060050154819060ff161515611edf5760009150610fdb565b60003411611ef05760009150610fdb565b60095434811515611efd57fe5b600160a060020a0333166000818152600d6020526040908190206004018054949093049384019092559192507f641df157745b52d6599a00a7e22851dbd6e9d1b2defbb2ba611e493a8565c0ab9083905190815260200160405180910390a2600191505090565b60007f0a00000000000000000000000000000000000000000000000000000000000000600160f860020a031983161015611fb0578160f860020a900460300160f860020a02905061101d565b8160f860020a900460570160f860020a02905061101d565b6000805433600160a060020a03908116911614611fe457600080fd5b6000828152600f6020908152604080832054600160a060020a03168352600d90915290206005015460ff16151561201d57506000610f93565b600160a060020a0333166000818152600d6020526040908190206004018054860190557feca2c485d4cfe01cd0328975f29768cb4f365cd63ceb7daf14cc9e64fa696d2e90859085905191825260208201526040908101905180910390a250600192915050565b60075460ff1681565b600160a060020a0333166000908152600d602052604081206005015460ff1615806120d45750600160a060020a0333166000908152600d602052604090206003015460ff16155b156120e157506000610f93565b6000838152600a6020526040902054600160a060020a0316158061212057506000838152600a602052604090205433600160a060020a03908116911614155b1561212d57506000610f93565b6000838152600c602052604090206046015460a060020a900460ff161561215657506000610f93565b506000828152600c602052604090206047018054600160a060020a038316600160a060020a0319909116179055600192915050565b6000612195612665565b61219d6127a2565b6121a56127a2565b60008060008060006121b5612735565b60008b8152600c602052604090819020906101609051908101604052908160008201548152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122755780601f1061224a57610100808354040283529160200191612275565b820191906000526020600020905b81548152906001019060200180831161225857829003601f168201915b50505050508152602001600282016020806020026040519081016040529190610400830182845b81548152602001906001019080831161229c5750505050508152602001602282016020806020026040519081016040529190610400830182845b8154815260200190600101908083116122d6575050509183525050604282015460ff9081161515602080840191909152604384015460408085019190915260448501546060850152604585015460808501526046850154600160a060020a0380821660a087015260a060020a909104909316151560c0850152604790940154821660e09093019290925260008f8152600a835292909220549293509116908201518260400151836060015184608001518560a00151866101200151876101000151886101400151879750869650859550995099509950995099509950995099509950509193959799909294969850565b60085481565b60008054600160a060020a03191633600160a060020a0316179055565b600160a060020a0333166000908152600d60205260409020600301805460ff19811660ff90911615179055600190565b6000806130397f3000000000000000000000000000000000000000000000000000000000000000600160f860020a031985161080159061248357507f3900000000000000000000000000000000000000000000000000000000000000600160f860020a0319851611155b156124995750602f1960f860020a8404016125f1565b7f6100000000000000000000000000000000000000000000000000000000000000600160f860020a0319851614156124d35750600a6125f1565b7f6200000000000000000000000000000000000000000000000000000000000000600160f860020a03198516141561250d5750600b6125f1565b7f6300000000000000000000000000000000000000000000000000000000000000600160f860020a0319851614156125475750600c6125f1565b7f6400000000000000000000000000000000000000000000000000000000000000600160f860020a0319851614156125815750600d6125f1565b7f6500000000000000000000000000000000000000000000000000000000000000600160f860020a0319851614156125bb5750600e6125f1565b7f6600000000000000000000000000000000000000000000000000000000000000600160f860020a0319851614156125f15750600f5b600081101580156126035750600f8111155b15612614578060019250925061261c565b806000925092505b50915091565b60065481565b60005433600160a060020a0390811691161461264357600080fd5b60008054600160a060020a031916600160a060020a0392909216919091179055565b60206040519081016040526000815290565b60e06040519081016040528060008152602001612692612665565b815260006020820181905260408201819052606082018190526080820181905260a09091015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106126fc57805160ff1916838001178555612729565b82800160010185558215612729579182015b8281111561272957825182559160200191906001019061270e565b50610fdb9291506127f7565b6109206040519081016040528060008152602001612751612665565b815260200161275e6127a2565b815260200161276b6127a2565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e09091015290565b6104006040519081016040526020815b60008152602001906001900390816127b25790505090565b8260208101928215612729579160200282018281111561272957825182559160200191906001019061270e565b6117bd91905b80821115610fdb57600081556001016127fd5600a165627a7a723058205cd1b457717eba00b536b6a361f8590b7fabc33bcae4d88c70fe26506c0f28d90029";

    protected PixelWars(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PixelWars(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<AssignEventResponse> getAssignEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Assign", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AssignEventResponse> responses = new ArrayList<AssignEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AssignEventResponse typedResponse = new AssignEventResponse();
            typedResponse.indexedTo = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AssignEventResponse> assignEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Assign", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AssignEventResponse>() {
            @Override
            public AssignEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AssignEventResponse typedResponse = new AssignEventResponse();
                typedResponse.indexedTo = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.indexedFrom = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.indexedTo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.indexedFrom = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.indexedTo = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<CreateAccountEventResponse> getCreateAccountEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateAccount", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateAccountEventResponse> responses = new ArrayList<CreateAccountEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateAccountEventResponse typedResponse = new CreateAccountEventResponse();
            typedResponse._creator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._account = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateAccountEventResponse> createAccountEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateAccount", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateAccountEventResponse>() {
            @Override
            public CreateAccountEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateAccountEventResponse typedResponse = new CreateAccountEventResponse();
                typedResponse._creator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._account = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<CreateCharacterEventResponse> getCreateCharacterEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateCharacter", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateCharacterEventResponse> responses = new ArrayList<CreateCharacterEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateCharacterEventResponse typedResponse = new CreateCharacterEventResponse();
            typedResponse._creator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._character = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateCharacterEventResponse> createCharacterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateCharacter", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateCharacterEventResponse>() {
            @Override
            public CreateCharacterEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateCharacterEventResponse typedResponse = new CreateCharacterEventResponse();
                typedResponse._creator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._character = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<BuyPixelWarsCoinsEventResponse> getBuyPixelWarsCoinsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("BuyPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<BuyPixelWarsCoinsEventResponse> responses = new ArrayList<BuyPixelWarsCoinsEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            BuyPixelWarsCoinsEventResponse typedResponse = new BuyPixelWarsCoinsEventResponse();
            typedResponse._buyer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._coins = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BuyPixelWarsCoinsEventResponse> buyPixelWarsCoinsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("BuyPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BuyPixelWarsCoinsEventResponse>() {
            @Override
            public BuyPixelWarsCoinsEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                BuyPixelWarsCoinsEventResponse typedResponse = new BuyPixelWarsCoinsEventResponse();
                typedResponse._buyer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._coins = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<IncreaseExperienceCoinEventResponse> getIncreaseExperienceCoinEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IncreaseExperienceCoin", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<IncreaseExperienceCoinEventResponse> responses = new ArrayList<IncreaseExperienceCoinEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            IncreaseExperienceCoinEventResponse typedResponse = new IncreaseExperienceCoinEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._experienceCoin = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IncreaseExperienceCoinEventResponse> increaseExperienceCoinEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IncreaseExperienceCoin", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IncreaseExperienceCoinEventResponse>() {
            @Override
            public IncreaseExperienceCoinEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                IncreaseExperienceCoinEventResponse typedResponse = new IncreaseExperienceCoinEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._experienceCoin = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<IncreaseSkillLevelEventResponse> getIncreaseSkillLevelEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IncreaseSkillLevel", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<IncreaseSkillLevelEventResponse> responses = new ArrayList<IncreaseSkillLevelEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            IncreaseSkillLevelEventResponse typedResponse = new IncreaseSkillLevelEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._skillIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._experienceCoins = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._freeExperienceCoins = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IncreaseSkillLevelEventResponse> increaseSkillLevelEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IncreaseSkillLevel", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IncreaseSkillLevelEventResponse>() {
            @Override
            public IncreaseSkillLevelEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                IncreaseSkillLevelEventResponse typedResponse = new IncreaseSkillLevelEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._skillIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._experienceCoins = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._freeExperienceCoins = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<AccrualPixelWarsCoinsEventResponse> getAccrualPixelWarsCoinsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AccrualPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AccrualPixelWarsCoinsEventResponse> responses = new ArrayList<AccrualPixelWarsCoinsEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AccrualPixelWarsCoinsEventResponse typedResponse = new AccrualPixelWarsCoinsEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._pixelCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._accountIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AccrualPixelWarsCoinsEventResponse> accrualPixelWarsCoinsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AccrualPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AccrualPixelWarsCoinsEventResponse>() {
            @Override
            public AccrualPixelWarsCoinsEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AccrualPixelWarsCoinsEventResponse typedResponse = new AccrualPixelWarsCoinsEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._pixelCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._accountIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<WithdrawalPixelWarsCoinsEventResponse> getWithdrawalPixelWarsCoinsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WithdrawalPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WithdrawalPixelWarsCoinsEventResponse> responses = new ArrayList<WithdrawalPixelWarsCoinsEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WithdrawalPixelWarsCoinsEventResponse typedResponse = new WithdrawalPixelWarsCoinsEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._pixelCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._accountIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WithdrawalPixelWarsCoinsEventResponse> withdrawalPixelWarsCoinsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WithdrawalPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WithdrawalPixelWarsCoinsEventResponse>() {
            @Override
            public WithdrawalPixelWarsCoinsEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WithdrawalPixelWarsCoinsEventResponse typedResponse = new WithdrawalPixelWarsCoinsEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._pixelCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._accountIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> name() {
        Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<BigInteger, Boolean, String>> getWinningPixel(BigInteger characterCount) {
        final Function function = new Function("getWinningPixel", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterCount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<BigInteger, Boolean, String>>(
                new Callable<Tuple3<BigInteger, Boolean, String>>() {
                    @Override
                    public Tuple3<BigInteger, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple3<BigInteger, Boolean, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> totalSupply() {
        Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> createAccount(String userEmail, String userPassword) {
        Function function = new Function(
                "createAccount", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userEmail), 
                new org.web3j.abi.datatypes.Utf8String(userPassword)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger>> getAccountInfo() {
        final Function function = new Function("getAccountInfo", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger>>(
                new Callable<Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger>>() {
                    @Override
                    public Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> nextAccountIndex() {
        Function function = new Function("nextAccountIndex", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> convertExperienceToFreeExperience(BigInteger characterIndex, BigInteger countCoinForCovert) {
        Function function = new Function(
                "convertExperienceToFreeExperience", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex), 
                new org.web3j.abi.datatypes.generated.Uint256(countCoinForCovert)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> getFirstUserCharacterIndex() {
        Function function = new Function("getFirstUserCharacterIndex", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> decimals() {
        Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setPixelWarsCoinPrice(BigInteger newPrice) {
        Function function = new Function(
                "setPixelWarsCoinPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> characterIndexToAddress(BigInteger param0) {
        Function function = new Function("characterIndexToAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> increaseSkillLevel(BigInteger characterIndex, BigInteger skillIndex, BigInteger freeExperienceCoins) {
        Function function = new Function(
                "increaseSkillLevel", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex), 
                new org.web3j.abi.datatypes.generated.Uint256(skillIndex), 
                new org.web3j.abi.datatypes.generated.Uint256(freeExperienceCoins)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String>> characters(BigInteger param0) {
        final Function function = new Function("characters", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String>>(
                new Callable<Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String>>() {
                    @Override
                    public Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> withdrawalPixelWarsCoins(BigInteger pixelCount, BigInteger accountIndex) {
        Function function = new Function(
                "withdrawalPixelWarsCoins", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pixelCount), 
                new org.web3j.abi.datatypes.generated.Uint256(accountIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> bytes32ToBytes(byte[] b32) {
        Function function = new Function("bytes32ToBytes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(b32)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> getCharacterStatisticsByIndex(BigInteger characterIndex) {
        final Function function = new Function("getCharacterStatisticsByIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> standard() {
        Function function = new Function("standard", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger>> getAccountInfoByIndex(BigInteger indexAccount) {
        final Function function = new Function("getAccountInfoByIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(indexAccount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger>>(
                new Callable<Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger>>() {
                    @Override
                    public Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple6<String, Boolean, BigInteger, Boolean, String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (Boolean) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getAccountBalance() {
        Function function = new Function("getAccountBalance", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getNextUserCharacterIndex(BigInteger previousCharacterIndex) {
        Function function = new Function("getNextUserCharacterIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(previousCharacterIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> deleteCharacter(BigInteger characterIndex) {
        Function function = new Function(
                "deleteCharacter", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> increaseExperienceCoin(BigInteger characterIndex, BigInteger experienceCoin) {
        Function function = new Function(
                "increaseExperienceCoin", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex), 
                new org.web3j.abi.datatypes.generated.Uint256(experienceCoin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String param0) {
        Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> pixelWarsCoinPrice() {
        Function function = new Function("pixelWarsCoinPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> createCharacter(String characterName) {
        Function function = new Function(
                "createCharacter", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(characterName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<List<BigInteger>, Boolean>> generateCharacterSkills() {
        final Function function = new Function("generateCharacterSkills", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Uint256>>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<List<BigInteger>, Boolean>>(
                new Callable<Tuple2<List<BigInteger>, Boolean>>() {
                    @Override
                    public Tuple2<List<BigInteger>, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<List<BigInteger>, Boolean>(
                                (List<BigInteger>) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> bytes32ToString(byte[] b32) {
        Function function = new Function("bytes32ToString", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(b32)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> symbol() {
        Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> buyPixelWarsCoins(BigInteger weiValue) {
        Function function = new Function(
                "buyPixelWarsCoins", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<byte[]> convertToChar(byte[] b) {
        Function function = new Function("convertToChar", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes1(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> accrualPixelWarsCoins(BigInteger pixelCount, BigInteger accountIndex) {
        Function function = new Function(
                "accrualPixelWarsCoins", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pixelCount), 
                new org.web3j.abi.datatypes.generated.Uint256(accountIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> allCharactersAssigned() {
        Function function = new Function("allCharactersAssigned", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setPossibleTenant(BigInteger characterIndex, String tenant) {
        Function function = new Function(
                "setPossibleTenant", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex), 
                new org.web3j.abi.datatypes.Address(tenant)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String>> getCharacterByIndex(BigInteger characterIndex) {
        final Function function = new Function("getCharacterByIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<StaticArray32<Uint256>>() {}, new TypeReference<StaticArray32<Uint256>>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String>>(
                new Callable<Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String>>() {
                    @Override
                    public Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (List<BigInteger>) results.get(2).getValue(), 
                                (List<BigInteger>) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> characterRemainingToAssign() {
        Function function = new Function("characterRemainingToAssign", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> owned() {
        Function function = new Function(
                "owned", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deactivateAccount() {
        Function function = new Function(
                "deactivateAccount", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, Boolean>> byteToUint(byte[] b) {
        final Function function = new Function("byteToUint", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes1(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<BigInteger, Boolean>>(
                new Callable<Tuple2<BigInteger, Boolean>>() {
                    @Override
                    public Tuple2<BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> nextCharacterIndexToAssign() {
        Function function = new Function("nextCharacterIndexToAssign", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<PixelWars> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(PixelWars.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<PixelWars> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(PixelWars.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static PixelWars load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PixelWars(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static PixelWars load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PixelWars(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AssignEventResponse {
        public String indexedTo;

        public BigInteger characterIndex;
    }

    public static class TransferEventResponse {
        public String indexedFrom;

        public String indexedTo;

        public BigInteger value;
    }

    public static class CreateAccountEventResponse {
        public String _creator;

        public BigInteger _account;
    }

    public static class CreateCharacterEventResponse {
        public String _creator;

        public BigInteger _character;
    }

    public static class BuyPixelWarsCoinsEventResponse {
        public String _buyer;

        public BigInteger _coins;
    }

    public static class IncreaseExperienceCoinEventResponse {
        public String _executor;

        public BigInteger _characterIndex;

        public BigInteger _experienceCoin;
    }

    public static class IncreaseSkillLevelEventResponse {
        public String _executor;

        public BigInteger _characterIndex;

        public BigInteger _skillIndex;

        public BigInteger _experienceCoins;

        public BigInteger _freeExperienceCoins;
    }

    public static class AccrualPixelWarsCoinsEventResponse {
        public String _executor;

        public BigInteger _pixelCount;

        public BigInteger _accountIndex;
    }

    public static class WithdrawalPixelWarsCoinsEventResponse {
        public String _executor;

        public BigInteger _pixelCount;

        public BigInteger _accountIndex;
    }
}
