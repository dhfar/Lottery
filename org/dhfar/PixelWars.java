package org.dhfar;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.StaticArray32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class PixelWars extends Contract {
    private static final String BINARY = "";

    protected PixelWars(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PixelWars(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<AssignEventResponse> getAssignEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Assign", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AssignEventResponse> responses = new ArrayList<AssignEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AssignEventResponse typedResponse = new AssignEventResponse();
            typedResponse.indexedTo = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AssignEventResponse> assignEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Assign", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AssignEventResponse>() {
            @Override
            public AssignEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AssignEventResponse typedResponse = new AssignEventResponse();
                typedResponse.indexedTo = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.indexedFrom = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.indexedTo = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.indexedFrom = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.indexedTo = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<CreateAccountEventResponse> getCreateAccountEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateAccount", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateAccountEventResponse> responses = new ArrayList<CreateAccountEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateAccountEventResponse typedResponse = new CreateAccountEventResponse();
            typedResponse._creator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._account = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateAccountEventResponse> createAccountEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateAccount", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateAccountEventResponse>() {
            @Override
            public CreateAccountEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateAccountEventResponse typedResponse = new CreateAccountEventResponse();
                typedResponse._creator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._account = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<CreateCharacterEventResponse> getCreateCharacterEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CreateCharacter", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CreateCharacterEventResponse> responses = new ArrayList<CreateCharacterEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CreateCharacterEventResponse typedResponse = new CreateCharacterEventResponse();
            typedResponse._creator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._character = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CreateCharacterEventResponse> createCharacterEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CreateCharacter", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CreateCharacterEventResponse>() {
            @Override
            public CreateCharacterEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CreateCharacterEventResponse typedResponse = new CreateCharacterEventResponse();
                typedResponse._creator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._character = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<BuyPixelWarsCoinsEventResponse> getBuyPixelWarsCoinsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("BuyPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<BuyPixelWarsCoinsEventResponse> responses = new ArrayList<BuyPixelWarsCoinsEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            BuyPixelWarsCoinsEventResponse typedResponse = new BuyPixelWarsCoinsEventResponse();
            typedResponse._buyer = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._coins = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<BuyPixelWarsCoinsEventResponse> buyPixelWarsCoinsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("BuyPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, BuyPixelWarsCoinsEventResponse>() {
            @Override
            public BuyPixelWarsCoinsEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                BuyPixelWarsCoinsEventResponse typedResponse = new BuyPixelWarsCoinsEventResponse();
                typedResponse._buyer = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._coins = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<IncreaseExperienceCoinEventResponse> getIncreaseExperienceCoinEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IncreaseExperienceCoin", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<IncreaseExperienceCoinEventResponse> responses = new ArrayList<IncreaseExperienceCoinEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            IncreaseExperienceCoinEventResponse typedResponse = new IncreaseExperienceCoinEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._experienceCoin = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IncreaseExperienceCoinEventResponse> increaseExperienceCoinEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IncreaseExperienceCoin", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IncreaseExperienceCoinEventResponse>() {
            @Override
            public IncreaseExperienceCoinEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                IncreaseExperienceCoinEventResponse typedResponse = new IncreaseExperienceCoinEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._experienceCoin = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<IncreaseFreeExperienceCoinEventResponse> getIncreaseFreeExperienceCoinEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IncreaseFreeExperienceCoin", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<IncreaseFreeExperienceCoinEventResponse> responses = new ArrayList<IncreaseFreeExperienceCoinEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            IncreaseFreeExperienceCoinEventResponse typedResponse = new IncreaseFreeExperienceCoinEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._freeExperienceCoin = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IncreaseFreeExperienceCoinEventResponse> increaseFreeExperienceCoinEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IncreaseFreeExperienceCoin", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IncreaseFreeExperienceCoinEventResponse>() {
            @Override
            public IncreaseFreeExperienceCoinEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                IncreaseFreeExperienceCoinEventResponse typedResponse = new IncreaseFreeExperienceCoinEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._freeExperienceCoin = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<IncreaseSkillLevelEventResponse> getIncreaseSkillLevelEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("IncreaseSkillLevel", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<IncreaseSkillLevelEventResponse> responses = new ArrayList<IncreaseSkillLevelEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            IncreaseSkillLevelEventResponse typedResponse = new IncreaseSkillLevelEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._skillIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._experienceCoins = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._freeExperienceCoins = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<IncreaseSkillLevelEventResponse> increaseSkillLevelEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("IncreaseSkillLevel", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, IncreaseSkillLevelEventResponse>() {
            @Override
            public IncreaseSkillLevelEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                IncreaseSkillLevelEventResponse typedResponse = new IncreaseSkillLevelEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._skillIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._experienceCoins = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._freeExperienceCoins = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public List<AccrualPixelWarsCoinsEventResponse> getAccrualPixelWarsCoinsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AccrualPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AccrualPixelWarsCoinsEventResponse> responses = new ArrayList<AccrualPixelWarsCoinsEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AccrualPixelWarsCoinsEventResponse typedResponse = new AccrualPixelWarsCoinsEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._pixelCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._accountIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AccrualPixelWarsCoinsEventResponse> accrualPixelWarsCoinsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AccrualPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AccrualPixelWarsCoinsEventResponse>() {
            @Override
            public AccrualPixelWarsCoinsEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AccrualPixelWarsCoinsEventResponse typedResponse = new AccrualPixelWarsCoinsEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._pixelCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._accountIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<WithdrawalPixelWarsCoinsEventResponse> getWithdrawalPixelWarsCoinsEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("WithdrawalPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<WithdrawalPixelWarsCoinsEventResponse> responses = new ArrayList<WithdrawalPixelWarsCoinsEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            WithdrawalPixelWarsCoinsEventResponse typedResponse = new WithdrawalPixelWarsCoinsEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._pixelCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._accountIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<WithdrawalPixelWarsCoinsEventResponse> withdrawalPixelWarsCoinsEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("WithdrawalPixelWarsCoins", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, WithdrawalPixelWarsCoinsEventResponse>() {
            @Override
            public WithdrawalPixelWarsCoinsEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                WithdrawalPixelWarsCoinsEventResponse typedResponse = new WithdrawalPixelWarsCoinsEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._pixelCount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._accountIndex = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<SetPossibleTenantEventResponse> getSetPossibleTenantEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("SetPossibleTenant", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<SetPossibleTenantEventResponse> responses = new ArrayList<SetPossibleTenantEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            SetPossibleTenantEventResponse typedResponse = new SetPossibleTenantEventResponse();
            typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._tenant = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<SetPossibleTenantEventResponse> setPossibleTenantEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("SetPossibleTenant", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, SetPossibleTenantEventResponse>() {
            @Override
            public SetPossibleTenantEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                SetPossibleTenantEventResponse typedResponse = new SetPossibleTenantEventResponse();
                typedResponse._executor = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._characterIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._tenant = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> name() {
        Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<BigInteger, Boolean, String>> getWinningPixel(BigInteger characterCount) {
        final Function function = new Function("getWinningPixel", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterCount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<BigInteger, Boolean, String>>(
                new Callable<Tuple3<BigInteger, Boolean, String>>() {
                    @Override
                    public Tuple3<BigInteger, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple3<BigInteger, Boolean, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> totalSupply() {
        Function function = new Function("totalSupply", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> createAccount(String userEmail, String userPassword) {
        Function function = new Function(
                "createAccount", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userEmail), 
                new org.web3j.abi.datatypes.Utf8String(userPassword)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger>> getAccountInfo() {
        final Function function = new Function("getAccountInfo", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger>>(
                new Callable<Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> nextAccountIndex() {
        Function function = new Function("nextAccountIndex", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> convertExperienceToFreeExperience(BigInteger characterIndex, BigInteger countCoinForCovert) {
        Function function = new Function(
                "convertExperienceToFreeExperience", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex), 
                new org.web3j.abi.datatypes.generated.Uint256(countCoinForCovert)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> decimals() {
        Function function = new Function("decimals", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> setPixelWarsCoinPrice(BigInteger newPrice) {
        Function function = new Function(
                "setPixelWarsCoinPrice", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> characterIndexToAddress(BigInteger param0) {
        Function function = new Function("characterIndexToAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> increaseSkillLevel(BigInteger characterIndex, BigInteger skillIndex, BigInteger freeExperienceCoins) {
        Function function = new Function(
                "increaseSkillLevel", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex), 
                new org.web3j.abi.datatypes.generated.Uint256(skillIndex), 
                new org.web3j.abi.datatypes.generated.Uint256(freeExperienceCoins)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String>> characters(BigInteger param0) {
        final Function function = new Function("characters", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String>>(
                new Callable<Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String>>() {
                    @Override
                    public Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple9<BigInteger, String, Boolean, BigInteger, BigInteger, BigInteger, String, Boolean, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (String) results.get(6).getValue(), 
                                (Boolean) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> withdrawalPixelWarsCoins(BigInteger pixelCount, BigInteger accountIndex) {
        Function function = new Function(
                "withdrawalPixelWarsCoins", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pixelCount), 
                new org.web3j.abi.datatypes.generated.Uint256(accountIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> bytes32ToBytes(byte[] b32) {
        Function function = new Function("bytes32ToBytes", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(b32)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Tuple2<BigInteger, BigInteger>> getCharacterStatisticsByIndex(BigInteger characterIndex) {
        final Function function = new Function("getCharacterStatisticsByIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<BigInteger, BigInteger>>(
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getAccountIndexByAddress(String ownerAccount) {
        Function function = new Function("getAccountIndexByAddress", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(ownerAccount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> standard() {
        Function function = new Function("standard", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger>> getAccountInfoByIndex(BigInteger indexAccount) {
        final Function function = new Function("getAccountInfoByIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(indexAccount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger>>(
                new Callable<Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple7<BigInteger, String, Boolean, BigInteger, Boolean, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> getAccountBalance() {
        Function function = new Function("getAccountBalance", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getNextUserCharacterIndex(BigInteger previousCharacterIndex) {
        Function function = new Function("getNextUserCharacterIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(previousCharacterIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> deleteCharacter(BigInteger characterIndex) {
        Function function = new Function(
                "deleteCharacter", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> increaseExperienceCoin(BigInteger characterIndex, BigInteger experienceCoin) {
        Function function = new Function(
                "increaseExperienceCoin", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex), 
                new org.web3j.abi.datatypes.generated.Uint256(experienceCoin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String param0) {
        Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> pixelWarsCoinPrice() {
        Function function = new Function("pixelWarsCoinPrice", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> createCharacter(String characterName) {
        Function function = new Function(
                "createCharacter", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(characterName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> bytes32ToString(byte[] b32) {
        Function function = new Function("bytes32ToString", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(b32)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> symbol() {
        Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> buyPixelWarsCoins(BigInteger weiValue) {
        Function function = new Function(
                "buyPixelWarsCoins", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<byte[]> convertToChar(byte[] b) {
        Function function = new Function("convertToChar", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes1(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes1>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Tuple2<List<BigInteger>, Boolean>> convertBlockHashToUintHexArray(BigInteger blockNumber) {
        final Function function = new Function("convertBlockHashToUintHexArray", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(blockNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Uint8>>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<List<BigInteger>, Boolean>>(
                new Callable<Tuple2<List<BigInteger>, Boolean>>() {
                    @Override
                    public Tuple2<List<BigInteger>, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<List<BigInteger>, Boolean>(
                                (List<BigInteger>) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> accrualPixelWarsCoins(BigInteger pixelCount, BigInteger accountIndex) {
        Function function = new Function(
                "accrualPixelWarsCoins", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pixelCount), 
                new org.web3j.abi.datatypes.generated.Uint256(accountIndex)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> allCharactersAssigned() {
        Function function = new Function("allCharactersAssigned", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setPossibleTenant(BigInteger characterIndex, String tenant) {
        Function function = new Function(
                "setPossibleTenant", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex), 
                new org.web3j.abi.datatypes.Address(tenant)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String>> getCharacterByIndex(BigInteger characterIndex) {
        final Function function = new Function("getCharacterByIndex", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(characterIndex)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<StaticArray32<Uint8>>() {}, new TypeReference<StaticArray32<Uint8>>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String>>(
                new Callable<Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String>>() {
                    @Override
                    public Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple9<String, String, List<BigInteger>, List<BigInteger>, Boolean, BigInteger, Boolean, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (List<BigInteger>) results.get(2).getValue(), 
                                (List<BigInteger>) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<List<BigInteger>, Boolean>> generateCharacterSkillMask() {
        final Function function = new Function("generateCharacterSkillMask", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray32<Uint8>>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<List<BigInteger>, Boolean>>(
                new Callable<Tuple2<List<BigInteger>, Boolean>>() {
                    @Override
                    public Tuple2<List<BigInteger>, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<List<BigInteger>, Boolean>(
                                (List<BigInteger>) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> characterRemainingToAssign() {
        Function function = new Function("characterRemainingToAssign", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> owned() {
        Function function = new Function(
                "owned", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> deactivateAccount() {
        Function function = new Function(
                "deactivateAccount", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<BigInteger, Boolean>> byteToUint(byte[] b) {
        final Function function = new Function("byteToUint", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes1(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple2<BigInteger, Boolean>>(
                new Callable<Tuple2<BigInteger, Boolean>>() {
                    @Override
                    public Tuple2<BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple2<BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> nextCharacterIndexToAssign() {
        Function function = new Function("nextCharacterIndexToAssign", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(String newOwner) {
        Function function = new Function(
                "transferOwnership", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<PixelWars> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(PixelWars.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<PixelWars> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(PixelWars.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static PixelWars load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PixelWars(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static PixelWars load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PixelWars(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AssignEventResponse {
        public String indexedTo;

        public BigInteger characterIndex;
    }

    public static class TransferEventResponse {
        public String indexedFrom;

        public String indexedTo;

        public BigInteger value;
    }

    public static class CreateAccountEventResponse {
        public String _creator;

        public BigInteger _account;
    }

    public static class CreateCharacterEventResponse {
        public String _creator;

        public BigInteger _character;
    }

    public static class BuyPixelWarsCoinsEventResponse {
        public String _buyer;

        public BigInteger _coins;
    }

    public static class IncreaseExperienceCoinEventResponse {
        public String _executor;

        public BigInteger _characterIndex;

        public BigInteger _experienceCoin;
    }

    public static class IncreaseFreeExperienceCoinEventResponse {
        public String _executor;

        public BigInteger _characterIndex;

        public BigInteger _freeExperienceCoin;
    }

    public static class IncreaseSkillLevelEventResponse {
        public String _executor;

        public BigInteger _characterIndex;

        public BigInteger _skillIndex;

        public BigInteger _experienceCoins;

        public BigInteger _freeExperienceCoins;
    }

    public static class AccrualPixelWarsCoinsEventResponse {
        public String _executor;

        public BigInteger _pixelCount;

        public BigInteger _accountIndex;
    }

    public static class WithdrawalPixelWarsCoinsEventResponse {
        public String _executor;

        public BigInteger _pixelCount;

        public BigInteger _accountIndex;
    }

    public static class SetPossibleTenantEventResponse {
        public String _executor;

        public BigInteger _characterIndex;

        public String _tenant;
    }
}
